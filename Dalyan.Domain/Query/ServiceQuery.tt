<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF6.Utility.CS.ttinclude"#><#@ 
 output extension=".cs"#>
 
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
 
 <#

const string inputFile = @"..\..\Dalyan.Db\DbModel.edmx";
var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
var itemCollection = new EdmMetadataLoader(textTransform.Host, textTransform.Errors).CreateEdmItemCollection(inputFile);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);

if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), inputFile))
{
    return string.Empty;
}

WriteHeader(codeStringGenerator, fileManager);

foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
	//Begin If
	if (codeStringGenerator.ControlTable(entity.Name))
    {

    fileManager.StartNewFile(entity.Name + "AddQuery.cs");
    BeginNamespace(code);
#>
<#=codeStringGenerator.UsingDirectivesHandler(inHeader: false)#>
<#=codeStringGenerator.AddQuery(code.Escape(entity))#>
{
	<#=codeStringGenerator.AddQueryInner(code.Escape(entity))#>
}

<#=codeStringGenerator.AddQueryHandler(code.Escape(entity))#>
{
	<#=codeStringGenerator.AddConstant(code.Escape(entity))#>

	<#
		string primaryKey = "Id";
		string retVal1 = Environment.NewLine + string.Format("\tpublic Dalyan.Entities.Models.{0} Handler({0}AddQuery query)" ,code.Escape(entity)) + Environment.NewLine + "\t{" + Environment.NewLine + "\t\ttry" + Environment.NewLine + "\t\t{" + Environment.NewLine;
		string retVal2 = string.Format("\t\t\tvar obj = new Dalyan.Db.{0}();" ,code.Escape(entity)) + Environment.NewLine;
		string retVal4 = string.Format("\t\t\t_db.{0}.Add(obj);",code.Escape(entity)) + Environment.NewLine + "\t\t\t_db.SaveChanges();" + Environment.NewLine;
		string retVal5 = string.Format("\t\t\tquery.{0}.{1} = obj.{1};",code.Escape(entity),primaryKey) + Environment.NewLine;
		string retVal6 = string.Format("\t\t\treturn query.{0};",code.Escape(entity)) + Environment.NewLine;
		
		string tempRow = "\t\t\tobj.{0} = query.{1}.{0};";
		string retVal3 = "";

		for (int i = 0; i < entity.DeclaredProperties.Count; i++)
        {
			string val = entity.DeclaredProperties[i].ToString();	
			retVal3 += string.Format(tempRow,val,code.Escape(entity)) + Environment.NewLine;
		}
	#>
    <#= retVal1 + retVal2 + retVal3 + retVal4 + retVal5 + retVal6 #>
		}
		catch (Exception ex)
		{
			throw new ExceptionLog(LogType.DATABASE_INSERT, LogLevel.ERROR, ex, "AddQueryHandler");
		}
	}
}


<#
    EndNamespace(code);

	fileManager.StartNewFile(entity.Name + "DeleteQuery.cs");
    BeginNamespace(code);
#>
<#=codeStringGenerator.UsingDirectivesHandler(inHeader: false)#>
<#=codeStringGenerator.DeleteQuery(code.Escape(entity))#>
{
	<#=codeStringGenerator.DeleteQueryInner(code.Escape(entity))#>
}

<#=codeStringGenerator.DeleteQueryHandler(code.Escape(entity))#>
{
	<#=codeStringGenerator.DeleteConstant(code.Escape(entity))#>

	<#
        
        

		primaryKey = "Id";
		retVal1 = Environment.NewLine + string.Format("\tpublic bool Handler(Dalyan.Domain.Query.{0}DeleteQuery query)" ,code.Escape(entity)) + Environment.NewLine + "\t{" + Environment.NewLine + "\t\ttry" + Environment.NewLine + "\t\t{" + Environment.NewLine;
		retVal2 = string.Format("\t\t\tvar obj = new Dalyan.Db.{0}();" ,code.Escape(entity)) + Environment.NewLine;
		retVal4 = string.Format("\t\t\tobj = _db.{0}.FirstOrDefault(x => x.Id == query.Id);",code.Escape(entity)) + Environment.NewLine;
	#>
    <#= retVal1 + retVal2 + retVal4 #>
			obj.IsDeleted = true;
			_db.SaveChanges();
			return true;
		}
		catch (Exception ex)
		{
			throw new ExceptionLog(LogType.DATABASE_DELETE, LogLevel.ERROR, ex, "DeleteQueryHandler");
		}
	}
}

<#
    EndNamespace(code);

	fileManager.StartNewFile(entity.Name + "EditQuery.cs");
    BeginNamespace(code);
#>
<#=codeStringGenerator.UsingDirectivesHandler(inHeader: false)#>
<#=codeStringGenerator.EditQuery(code.Escape(entity))#>
{
	<#=codeStringGenerator.EditQueryInner(code.Escape(entity))#>
}

<#=codeStringGenerator.EditQueryHandler(code.Escape(entity))#>
{
	<#=codeStringGenerator.EditConstant(code.Escape(entity))#>

	<#
		primaryKey = "Id";
		retVal1 = Environment.NewLine + string.Format("\tpublic Dalyan.Entities.Models.{0} Handler({0}EditQuery query)" ,code.Escape(entity)) + Environment.NewLine + "\t{" + Environment.NewLine + "\t\ttry" + Environment.NewLine + "\t\t{" + Environment.NewLine;
		retVal2 = string.Format("\t\t\tvar obj = new Dalyan.Db.{0}();" ,code.Escape(entity)) + Environment.NewLine + string.Format("\t\t\tobj = _db.{0}.FirstOrDefault(x => x.Id == query.{0}.Id);",code.Escape(entity)) + Environment.NewLine;
		retVal4 = "\t\t\t_db.SaveChanges();" + Environment.NewLine;
		retVal6 = string.Format("\t\t\treturn query.{0};",code.Escape(entity)) + Environment.NewLine;
		
		tempRow = "\t\t\tobj.{0} = query.{1}.{0};";
		retVal3 = "";

		for (int i = 0; i < entity.DeclaredProperties.Count; i++)
        {
			string val = entity.DeclaredProperties[i].ToString();	
			retVal3 += string.Format(tempRow,val,code.Escape(entity)) + Environment.NewLine;
		}
	#>
    <#= retVal1 + retVal2 + retVal3 + retVal4 + retVal6 #>
		}
		catch (Exception ex)
		{
			throw new ExceptionLog(LogType.DATABASE_UPDATE, LogLevel.ERROR, ex, "EditQueryHandler");
		}
	}
}

<#
    EndNamespace(code);

	fileManager.StartNewFile(entity.Name + "GetAllQuery.cs");
    BeginNamespace(code);
#>
<#=codeStringGenerator.UsingDirectivesHandler(inHeader: false)#>
<#=codeStringGenerator.GetAllQuery(code.Escape(entity))#>
{
	<#=codeStringGenerator.GetAllQueryInner(code.Escape(entity))#>
}

<#=codeStringGenerator.GetAllQueryHandler(code.Escape(entity))#>
{
	<#=codeStringGenerator.GetAllConstant(code.Escape(entity))#>

	<#
		primaryKey = "Id";
		retVal1 = Environment.NewLine + string.Format("\tpublic IList<Dalyan.Entities.Models.{0}> Handler({0}GetAllQuery query)" ,code.Escape(entity)) + Environment.NewLine + "\t{" + Environment.NewLine + "\t\ttry" + Environment.NewLine + "\t\t{" + Environment.NewLine;
		retVal2 = string.Format("\t\t\tvar result = _db.{0}.Where(x => x.IsDeleted == false);" ,code.Escape(entity)) + Environment.NewLine + string.Format("\t\t\treturn result.Select(x => new Dalyan.Entities.Models.{0}",code.Escape(entity)) + Environment.NewLine + "\t\t\t{" + Environment.NewLine;
		retVal4 = string.Format("\t\t\t_db.{0}.Add(obj);",code.Escape(entity)) + Environment.NewLine + "\t\t\t_db.SaveChanges();" + Environment.NewLine;
		retVal5 = string.Format("\t\t\tquery.{0}.{1} = obj.{1};",code.Escape(entity),primaryKey) + Environment.NewLine;
		retVal6 = "\t\t\t}).ToList();"+ Environment.NewLine;
		retVal3 = "";
		bool flag = false;
		
		
		var navigationProperties = typeMapper.GetNavigationProperties(entity);
		if (navigationProperties.Any())
		{
			string includeText = "";
			string memberText = "";
			retVal3 = "";
			foreach (var navigationProperty in navigationProperties)
			{
				//*var result = _db.User.Include("City").Where(x => x.IsDeleted == false).AsEnumerable().ToList();
				//*Mapper.CreateMap<Dalyan.Db.City, Dalyan.Entities.Models.City>();
				//Mapper.CreateMap<Dalyan.Db.User, Dalyan.Entities.Models.User>().ForMember(c => c.City, d => d.MapFrom(s => s.City));
				//*return Mapper.Map<IEnumerable<Dalyan.Db.User>, IEnumerable<Dalyan.Entities.Models.User>>(result).ToList();
				
				var endType = typeMapper.GetTypeName(navigationProperty.ToEndMember.GetEntityType());
				if (navigationProperty.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many)
				{
					retVal3 += string.Format("\t\t\tMapper.CreateMap<Dalyan.Db.{0}, Dalyan.Entities.Models.{0}>();" ,endType) + Environment.NewLine;
					includeText += string.Format(".Include(\"{0}\")",navigationProperty.ToString());
					memberText += string.Format(".ForMember(c => c.{0}, d => d.MapFrom(s => s.{1}))",navigationProperty.ToString(),navigationProperty.ToString());
					
				} 
				else
				{
					flag = true;
				}
			}

			if (retVal3 == "")
			{
				retVal2 = string.Format("\t\t\tvar result = _db.{0}.Where(x => x.IsDeleted == false).AsEnumerable().ToList();" ,code.Escape(entity)) + Environment.NewLine;
				retVal3 = string.Format("\t\t\tMapper.CreateMap<Dalyan.Db.{0}, Dalyan.Entities.Models.{0}>();" ,code.Escape(entity)) + Environment.NewLine;
				retVal4 = string.Format("\t\t\treturn Mapper.Map<IEnumerable<Dalyan.Db.{0}>, IEnumerable<Dalyan.Entities.Models.{0}>>(result).ToList();" ,code.Escape(entity)) + Environment.NewLine;	
				retVal5 = "";
				retVal6 = "";
			}
			else 
            {
				retVal2 = string.Format("\t\t\tvar result = _db.{0}{1}.Where(x => x.IsDeleted == false).AsEnumerable().ToList();",code.Escape(entity),includeText) + Environment.NewLine;
				retVal4 = string.Format("\t\t\tMapper.CreateMap<Dalyan.Db.{0}, Dalyan.Entities.Models.{0}>(){1};",code.Escape(entity),memberText) + Environment.NewLine;	
				retVal5 = string.Format("\t\t\treturn Mapper.Map<IEnumerable<Dalyan.Db.{0}>, IEnumerable<Dalyan.Entities.Models.{0}>>(result).ToList();" ,code.Escape(entity)) + Environment.NewLine;	
				retVal6 = "";
			}
		}
		else 
        {
			retVal2 = string.Format("\t\t\tvar result = _db.{0}.Where(x => x.IsDeleted == false).AsEnumerable().ToList();" ,code.Escape(entity)) + Environment.NewLine;
			retVal3 = string.Format("\t\t\tMapper.CreateMap<Dalyan.Db.{0}, Dalyan.Entities.Models.{0}>();" ,code.Escape(entity)) + Environment.NewLine;
			retVal4 = string.Format("\t\t\treturn Mapper.Map<IEnumerable<Dalyan.Db.{0}>, IEnumerable<Dalyan.Entities.Models.{0}>>(result).ToList();" ,code.Escape(entity)) + Environment.NewLine;	
			retVal5 = "";
			retVal6 = "";
		}

	#>
    <#= retVal1 + retVal2 + retVal3 + retVal4 + retVal5 +retVal6 #>
		}
		catch (Exception ex)
		{
			throw new ExceptionLog(LogType.DATABASE_SELECT, LogLevel.ERROR, ex, "GetAllQueryHandler");
		}
	}
}

<#
    EndNamespace(code);

	 fileManager.StartNewFile(entity.Name + "RetrieveQuery.cs");
    BeginNamespace(code);
#>
<#=codeStringGenerator.UsingDirectivesHandler(inHeader: false)#>
<#=codeStringGenerator.RetrieveQuery(code.Escape(entity))#>
{
	<#=codeStringGenerator.RetrieveQueryInner(code.Escape(entity))#>
}

<#=codeStringGenerator.RetrieveQueryHandler(code.Escape(entity))#>
{
	<#=codeStringGenerator.RetrieveConstant(code.Escape(entity))#>

	<#
		primaryKey = "Id";
		retVal1 = Environment.NewLine + string.Format("\tpublic Dalyan.Entities.Models.{0} Handler({0}RetrieveQuery query)" ,code.Escape(entity)) + Environment.NewLine + "\t{" + Environment.NewLine + "\t\ttry" + Environment.NewLine + "\t\t{" + Environment.NewLine;
		retVal2 = string.Format("\t\t\tvar result = _db.{0}.Where(x => x.IsDeleted == false);" ,code.Escape(entity)) + Environment.NewLine + string.Format("\t\t\treturn result.Select(x => new Dalyan.Entities.Models.{0}",code.Escape(entity)) + Environment.NewLine + "\t\t\t{" + Environment.NewLine;
		retVal4 = string.Format("\t\t\t_db.{0}.Add(obj);",code.Escape(entity)) + Environment.NewLine + "\t\t\t_db.SaveChanges();" + Environment.NewLine;
		retVal5 = string.Format("\t\t\tquery.{0}.{1} = obj.{1};",code.Escape(entity),primaryKey) + Environment.NewLine;
		retVal6 = "\t\t\t}).ToList();"+ Environment.NewLine;
		retVal3 = "";
		flag = false;
		
		
		navigationProperties = typeMapper.GetNavigationProperties(entity);
		if (navigationProperties.Any())
		{
			string includeText = "";
			string memberText = "";
			retVal3 = "";
			foreach (var navigationProperty in navigationProperties)
			{
				//*var result = _db.User.Include("City").Where(x => x.IsDeleted == false).AsEnumerable().ToList();
				//*Mapper.CreateMap<Dalyan.Db.City, Dalyan.Entities.Models.City>();
				//Mapper.CreateMap<Dalyan.Db.User, Dalyan.Entities.Models.User>().ForMember(c => c.City, d => d.MapFrom(s => s.City));
				//*return Mapper.Map<IEnumerable<Dalyan.Db.User>, IEnumerable<Dalyan.Entities.Models.User>>(result).ToList();
				
				var endType = typeMapper.GetTypeName(navigationProperty.ToEndMember.GetEntityType());
				if (navigationProperty.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many)
				{
					retVal3 += string.Format("\t\t\tMapper.CreateMap<Dalyan.Db.{0}, Dalyan.Entities.Models.{0}>();" ,endType) + Environment.NewLine;
					includeText += string.Format(".Include(\"{0}\")",navigationProperty.ToString());
					memberText += string.Format(".ForMember(c => c.{0}, d => d.MapFrom(s => s.{1}))",navigationProperty.ToString(),navigationProperty.ToString());
					
				} 
				else
				{
					flag = true;
				}
			}

			if (retVal3 == "")
			{
				retVal2 = string.Format("\t\t\tvar result = _db.{0}.Where(x => x.IsDeleted == false  && x.Id == query.Id).FirstOrDefault();" ,code.Escape(entity)) + Environment.NewLine;
				retVal3 = string.Format("\t\t\tMapper.CreateMap<Dalyan.Db.{0}, Dalyan.Entities.Models.{0}>();" ,code.Escape(entity)) + Environment.NewLine;
				retVal4 = string.Format("\t\t\treturn Mapper.Map<Dalyan.Db.{0}, Dalyan.Entities.Models.{0}>(result);" ,code.Escape(entity)) + Environment.NewLine;	
				retVal5 = "";
				retVal6 = "";
			}
			else 
            {
				retVal2 = string.Format("\t\t\tvar result = _db.{0}{1}.Where(x => x.IsDeleted == false && x.Id == query.Id).FirstOrDefault();",code.Escape(entity),includeText) + Environment.NewLine;
				retVal4 = string.Format("\t\t\tMapper.CreateMap<Dalyan.Db.{0}, Dalyan.Entities.Models.{0}>(){1};",code.Escape(entity),memberText) + Environment.NewLine;	
				retVal5 = string.Format("\t\t\treturn Mapper.Map<Dalyan.Db.{0}, Dalyan.Entities.Models.{0}>(result);" ,code.Escape(entity)) + Environment.NewLine;	
				retVal6 = "";
			}
		}
		else 
        {
			retVal2 = string.Format("\t\t\tvar result = _db.{0}.Where(x => x.IsDeleted == false && x.Id == query.Id).FirstOrDefault();" ,code.Escape(entity)) + Environment.NewLine;
			retVal3 = string.Format("\t\t\tMapper.CreateMap<Dalyan.Db.{0}, Dalyan.Entities.Models.{0}>();" ,code.Escape(entity)) + Environment.NewLine;
			retVal4 = string.Format("\t\t\treturn Mapper.Map<Dalyan.Db.{0}, Dalyan.Entities.Models.{0}>(result);" ,code.Escape(entity)) + Environment.NewLine;	
			retVal5 = "";
			retVal6 = "";
		}

	#>
    <#= retVal1 + retVal2 + retVal3 + retVal4 + retVal5 +retVal6 #>
		}
		catch (Exception ex)
		{
			throw new ExceptionLog(LogType.DATABASE_SELECT, LogLevel.ERROR, ex, "RetrieveQueryHandler");
		}
	}
}
<#
    EndNamespace(code);
    //End If
	}
}

fileManager.Process();

#>
<#+

public void WriteHeader(CodeStringGenerator codeStringGenerator, EntityFrameworkTemplateFileManager fileManager)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------
<#=codeStringGenerator.UsingDirectives(inHeader: true)#>
<#+
    fileManager.EndBlock();
}

public void BeginNamespace(CodeGenerationTools code)
{
    var codeNamespace = code.VsNamespaceSuggestion();
    if (!String.IsNullOrEmpty(codeNamespace))
    {
#>
namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#+
        PushIndent("    ");
    }
}

public void EndNamespace(CodeGenerationTools code)
{
    if (!String.IsNullOrEmpty(code.VsNamespaceSuggestion()))
    {
        PopIndent();
#>
}
<#+
    }
}

public const string TemplateId = "CSharp_DbContext_Types_EF6";

public class CodeStringGenerator
{
    private readonly CodeGenerationTools _code;
    private readonly TypeMapper _typeMapper;
    private readonly MetadataTools _ef;

    public CodeStringGenerator(CodeGenerationTools code, TypeMapper typeMapper, MetadataTools ef)
    {
        ArgumentNotNull(code, "code");
        ArgumentNotNull(typeMapper, "typeMapper");
        ArgumentNotNull(ef, "ef");

        _code = code;
        _typeMapper = typeMapper;
        _ef = ef;
    }

	public List<string> GetNames()
    {
        List<string> result = new List<string>(); 
        XmlDocument doc = new XmlDocument();
		string absolutePath = Path.GetFullPath(@"C:\Dev\derKosi\Dalyan\Dalyan.Entities\Definition\Tables.xml");  
        doc.Load(absolutePath);
        foreach (XmlNode node in doc.SelectNodes("/Tables/Table"))
        {
            result.Add(node.Attributes["Name"].InnerText);
        }
        return result;
    }

	public bool ControlTable(string tableName)
    {
		XmlDocument doc = new XmlDocument(); 
		string absolutePath = Path.GetFullPath(@"C:\Dev\derKosi\Dalyan\Dalyan.Entities\Definition\Tables.xml");
        doc.Load(absolutePath);
		XmlNodeList xnList = doc.SelectNodes("/Tables/Table[@Name='" + tableName +"']");
		foreach (XmlNode xn in xnList)
		{
		  return true;
		}
		return false;
	}

    public string Property(EdmProperty edmProperty)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} {1} {2} {{ {3}get; {4}set; }}",
            Accessibility.ForProperty(edmProperty),
            _typeMapper.GetTypeName(edmProperty.TypeUsage),
            _code.Escape(edmProperty),
            _code.SpaceAfter(Accessibility.ForGetter(edmProperty)),
            _code.SpaceAfter(Accessibility.ForSetter(edmProperty)));
    }

    public string NavigationProperty(NavigationProperty navProp)
    {
        var endType = _typeMapper.GetTypeName(navProp.ToEndMember.GetEntityType());
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} {1} {2} {{ {3}get; {4}set; }}",
            AccessibilityAndVirtual(Accessibility.ForNavigationProperty(navProp)),
            navProp.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many ? ("ICollection<" + endType + ">") : endType,
            _code.Escape(navProp),
            _code.SpaceAfter(Accessibility.ForGetter(navProp)),
            _code.SpaceAfter(Accessibility.ForSetter(navProp)));
    }
    
    public string AccessibilityAndVirtual(string accessibility)
    {
        return accessibility + (accessibility != "private" ? " virtual" : "");
    }
    
    public string EntityClassOpening(EntityType entity)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} {1}partial class {2}{3}",
            Accessibility.ForType(entity),
            _code.SpaceAfter(_code.AbstractOption(entity)),
            _code.Escape(entity),
            _code.StringBefore(" : ", _typeMapper.GetTypeName(entity.BaseType)));
    }
    
    public string EnumOpening(SimpleType enumType)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} enum {1} : {2}",
            Accessibility.ForType(enumType),
            _code.Escape(enumType),
            _code.Escape(_typeMapper.UnderlyingClrType(enumType)));
        }
    
    public void WriteFunctionParameters(EdmFunction edmFunction, Action<string, string, string, string> writeParameter)
    {
        var parameters = FunctionImportParameter.Create(edmFunction.Parameters, _code, _ef);
        foreach (var parameter in parameters.Where(p => p.NeedsLocalVariable))
        {
            var isNotNull = parameter.IsNullableOfT ? parameter.FunctionParameterName + ".HasValue" : parameter.FunctionParameterName + " != null";
            var notNullInit = "new ObjectParameter(\"" + parameter.EsqlParameterName + "\", " + parameter.FunctionParameterName + ")";
            var nullInit = "new ObjectParameter(\"" + parameter.EsqlParameterName + "\", typeof(" + TypeMapper.FixNamespaces(parameter.RawClrTypeName) + "))";
            writeParameter(parameter.LocalVariableName, isNotNull, notNullInit, nullInit);
        }
    }
    
    public string ComposableFunctionMethod(EdmFunction edmFunction, string modelNamespace)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} IQueryable<{1}> {2}({3})",
            AccessibilityAndVirtual(Accessibility.ForMethod(edmFunction)),
            _typeMapper.GetTypeName(_typeMapper.GetReturnType(edmFunction), modelNamespace),
            _code.Escape(edmFunction),
            string.Join(", ", parameters.Select(p => TypeMapper.FixNamespaces(p.FunctionParameterType) + " " + p.FunctionParameterName).ToArray()));
    }
    
    public string ComposableCreateQuery(EdmFunction edmFunction, string modelNamespace)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        
        return string.Format(
            CultureInfo.InvariantCulture,
            "return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<{0}>(\"[{1}].[{2}]({3})\"{4});",
            _typeMapper.GetTypeName(_typeMapper.GetReturnType(edmFunction), modelNamespace),
            edmFunction.NamespaceName,
            edmFunction.Name,
            string.Join(", ", parameters.Select(p => "@" + p.EsqlParameterName).ToArray()),
            _code.StringBefore(", ", string.Join(", ", parameters.Select(p => p.ExecuteParameterName).ToArray())));
    }
    
    public string FunctionMethod(EdmFunction edmFunction, string modelNamespace, bool includeMergeOption)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        var returnType = _typeMapper.GetReturnType(edmFunction);

        var paramList = String.Join(", ", parameters.Select(p => TypeMapper.FixNamespaces(p.FunctionParameterType) + " " + p.FunctionParameterName).ToArray());
        if (includeMergeOption)
        {
            paramList = _code.StringAfter(paramList, ", ") + "MergeOption mergeOption";
        }

        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} {1} {2}({3})",
            AccessibilityAndVirtual(Accessibility.ForMethod(edmFunction)),
            returnType == null ? "int" : "ObjectResult<" + _typeMapper.GetTypeName(returnType, modelNamespace) + ">",
            _code.Escape(edmFunction),
            paramList);
    }
    
    public string ExecuteFunction(EdmFunction edmFunction, string modelNamespace, bool includeMergeOption)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        var returnType = _typeMapper.GetReturnType(edmFunction);

        var callParams = _code.StringBefore(", ", String.Join(", ", parameters.Select(p => p.ExecuteParameterName).ToArray()));
        if (includeMergeOption)
        {
            callParams = ", mergeOption" + callParams;
        }
        
        return string.Format(
            CultureInfo.InvariantCulture,
            "return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction{0}(\"{1}\"{2});",
            returnType == null ? "" : "<" + _typeMapper.GetTypeName(returnType, modelNamespace) + ">",
            edmFunction.Name,
            callParams);
    }
    
    public string DbSet(EntitySet entitySet)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} virtual DbSet<{1}> {2} {{ get; set; }}",
            Accessibility.ForReadOnlyProperty(entitySet),
            _typeMapper.GetTypeName(entitySet.ElementType),
            _code.Escape(entitySet));
    }

    public string UsingDirectives(bool inHeader, bool includeCollections = true)
    {
        return inHeader == string.IsNullOrEmpty(_code.VsNamespaceSuggestion())
            ? string.Format(
                CultureInfo.InvariantCulture,
                "{0}using System;" + Environment.NewLine + "using Dalyan.Domain.Interfaces;" + 
				Environment.NewLine + "using System.Linq;" + Environment.NewLine + "using System.Text;" + 
				Environment.NewLine + "using System.Threading.Tasks;" + "{1}" +
                "{2}",
                inHeader ? Environment.NewLine : "",
                includeCollections ? (Environment.NewLine + "using System.Collections.Generic;") : "",
                inHeader ? "" : Environment.NewLine)
            : "";
    }

	public string UsingDirectivesHandler(bool inHeader, bool includeCollections = true)
    {
        return inHeader == string.IsNullOrEmpty(_code.VsNamespaceSuggestion())
            ? string.Format(
                CultureInfo.InvariantCulture,
                "{0}using System;" + Environment.NewLine + "using Dalyan.Domain;" +
				Environment.NewLine + "using System.Linq;" + Environment.NewLine + "using System.Text;" +
				Environment.NewLine + "using Dalyan.Domain.Query;" + Environment.NewLine + "using System.Data;" +
				Environment.NewLine + "using System.Xml;" + Environment.NewLine + "using Dalyan.Db;" +
				Environment.NewLine + "using Entities.Models;" + Environment.NewLine + "using Dalyan.Entities.Enumerations;" + Environment.NewLine + "using AutoMapper;" +
				Environment.NewLine + "using System.Threading.Tasks;" + "{1}" +
                "{2}",
                inHeader ? Environment.NewLine : "",
                includeCollections ? (Environment.NewLine + "using System.Collections.Generic;") : "",
                inHeader ? "" : Environment.NewLine)
            : "";
    }

	public string AddConstant(string entityName)
    {
		return "private readonly DbEntities _db;" + Environment.NewLine + "\tpublic " + entityName + "AddQueryHandler()" + Environment.NewLine + "\t{" + Environment.NewLine + "\t\t_db = new DbEntities();" + Environment.NewLine + "\t}";
	}

	public string AddQueryHandler(string entityName)
    {
		return "public class "+ entityName + "AddQueryHandler : IQueryHandler<" + entityName +"AddQuery,Dalyan.Entities.Models."+ entityName + ">";
	}

	public string AddQuery(string entityName)
    {
		return string.Format("public class {0}AddQuery : IQuery<Dalyan.Entities.Models.{0}>",entityName);
	}

	public string AddQueryInner(string entityName)
    {
		return string.Format("public Dalyan.Entities.Models.{0} {0}" ,entityName) + "{ get; set; }";
	}

	public string DeleteConstant(string entityName)
    {
		return "private readonly DbEntities _db;" + Environment.NewLine + "\tpublic " + entityName + "DeleteQueryHandler()" + Environment.NewLine + "\t{" + Environment.NewLine + "\t\t_db = new DbEntities();" + Environment.NewLine + "\t}";
	}

	public string DeleteQueryHandler(string entityName)
    {
		return string.Format("public class {0}DeleteQueryHandler :  IQueryHandler<Dalyan.Domain.Query.{0}DeleteQuery, bool>",entityName);
	}

	public string DeleteQuery(string entityName)
    {
		return string.Format("public class {0}DeleteQuery : IQuery<bool>",entityName);
	}

	public string DeleteQueryInner(string entityName)
    {
		return "public int Id { get; set; }";
	}

	public string EditQueryHandler(string entityName)
    {
		return string.Format("public class {0}EditQueryHandler : IQueryHandler<{0}EditQuery, Dalyan.Entities.Models.{0}>",entityName);
	}

	public string EditConstant(string entityName)
    {
		return "private readonly DbEntities _db;" + Environment.NewLine + "\tpublic " + entityName + "EditQueryHandler()" + Environment.NewLine + "\t{" + Environment.NewLine + "\t\t_db = new DbEntities();" + Environment.NewLine + "\t}";
	}

	public string EditQuery(string entityName)
    {
		return string.Format("public class {0}EditQuery : IQuery<Dalyan.Entities.Models.{0}>",entityName);
	}

	public string EditQueryInner(string entityName)
    {
		return string.Format("public Dalyan.Entities.Models.{0} {0}" ,entityName) + "{ get; set; }";
	}

	public string GetAllQueryHandler(string entityName)
    {
		return string.Format("public class {0}GetAllQueryHandler : IQueryHandler<{0}GetAllQuery, IList<Dalyan.Entities.Models.{0}>>",entityName);
	}

	public string GetAllConstant(string entityName)
    {
		return "private readonly DbEntities _db;" + Environment.NewLine + "\tpublic " + entityName + "GetAllQueryHandler()" + Environment.NewLine + "\t{" + Environment.NewLine + "\t\t_db = new DbEntities();" + Environment.NewLine + "\t}";
	}

	public string GetAllQuery(string entityName)
    {
		return string.Format("public class {0}GetAllQuery : IQuery<IList<Dalyan.Entities.Models.{0}>>",entityName);
	}

	public string GetAllQueryInner(string entityName)
    {
		return "";
	}

	public string RetrieveConstant(string entityName)
    {
		return "private readonly DbEntities _db;" + Environment.NewLine + "\tpublic " + entityName + "RetrieveQueryHandler()" + Environment.NewLine + "\t{" + Environment.NewLine + "\t\t_db = new DbEntities();" + Environment.NewLine + "\t}";
	}

	public string RetrieveQueryHandler(string entityName)
    {
		return string.Format("public class {0}RetrieveQueryHandler : IQueryHandler<{0}RetrieveQuery, Dalyan.Entities.Models.{0}>",entityName);
	}

	public string RetrieveQuery(string entityName)
    {
		return string.Format("public class {0}RetrieveQuery : IQuery<Dalyan.Entities.Models.{0}>",entityName);
	}

	public string RetrieveQueryInner(string entityName)
    {
		return "public int Id { get; set; }";
	}

}

public class TypeMapper
{
    private const string ExternalTypeNameAttributeName = @"http://schemas.microsoft.com/ado/2006/04/codegeneration:ExternalTypeName";

    private readonly System.Collections.IList _errors;
    private readonly CodeGenerationTools _code;
    private readonly MetadataTools _ef;

    public TypeMapper(CodeGenerationTools code, MetadataTools ef, System.Collections.IList errors)
    {
        ArgumentNotNull(code, "code");
        ArgumentNotNull(ef, "ef");
        ArgumentNotNull(errors, "errors");

        _code = code;
        _ef = ef;
        _errors = errors;
    }

    public static string FixNamespaces(string typeName)
    {
        return typeName.Replace("System.Data.Spatial.", "System.Data.Entity.Spatial.");
    }

    public string GetTypeName(TypeUsage typeUsage)
    {
        return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace: null);
    }

    public string GetTypeName(EdmType edmType)
    {
        return GetTypeName(edmType, isNullable: null, modelNamespace: null);
    }

    public string GetTypeName(TypeUsage typeUsage, string modelNamespace)
    {
        return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace);
    }

    public string GetTypeName(EdmType edmType, string modelNamespace)
    {
        return GetTypeName(edmType, isNullable: null, modelNamespace: modelNamespace);
    }

    public string GetTypeName(EdmType edmType, bool? isNullable, string modelNamespace)
    {
        if (edmType == null)
        {
            return null;
        }

        var collectionType = edmType as CollectionType;
        if (collectionType != null)
        {
            return String.Format(CultureInfo.InvariantCulture, "ICollection<{0}>", GetTypeName(collectionType.TypeUsage, modelNamespace));
        }

        var typeName = _code.Escape(edmType.MetadataProperties
                                .Where(p => p.Name == ExternalTypeNameAttributeName)
                                .Select(p => (string)p.Value)
                                .FirstOrDefault())
            ?? (modelNamespace != null && edmType.NamespaceName != modelNamespace ?
                _code.CreateFullName(_code.EscapeNamespace(edmType.NamespaceName), _code.Escape(edmType)) :
                _code.Escape(edmType));

        if (edmType is StructuralType)
        {
            return typeName;
        }

        if (edmType is SimpleType)
        {
            var clrType = UnderlyingClrType(edmType);
            if (!IsEnumType(edmType))
            {
                typeName = _code.Escape(clrType);
            }

            typeName = FixNamespaces(typeName);

            return clrType.IsValueType && isNullable == true ?
                String.Format(CultureInfo.InvariantCulture, "Nullable<{0}>", typeName) :
                typeName;
        }

        throw new ArgumentException("edmType");
    }
    
    public Type UnderlyingClrType(EdmType edmType)
    {
        ArgumentNotNull(edmType, "edmType");

        var primitiveType = edmType as PrimitiveType;
        if (primitiveType != null)
        {
            return primitiveType.ClrEquivalentType;
        }

        if (IsEnumType(edmType))
        {
            return GetEnumUnderlyingType(edmType).ClrEquivalentType;
        }

        return typeof(object);
    }
    
    public object GetEnumMemberValue(MetadataItem enumMember)
    {
        ArgumentNotNull(enumMember, "enumMember");
        
        var valueProperty = enumMember.GetType().GetProperty("Value");
        return valueProperty == null ? null : valueProperty.GetValue(enumMember, null);
    }
    
    public string GetEnumMemberName(MetadataItem enumMember)
    {
        ArgumentNotNull(enumMember, "enumMember");
        
        var nameProperty = enumMember.GetType().GetProperty("Name");
        return nameProperty == null ? null : (string)nameProperty.GetValue(enumMember, null);
    }

    public System.Collections.IEnumerable GetEnumMembers(EdmType enumType)
    {
        ArgumentNotNull(enumType, "enumType");

        var membersProperty = enumType.GetType().GetProperty("Members");
        return membersProperty != null 
            ? (System.Collections.IEnumerable)membersProperty.GetValue(enumType, null)
            : Enumerable.Empty<MetadataItem>();
    }
    
    public bool EnumIsFlags(EdmType enumType)
    {
        ArgumentNotNull(enumType, "enumType");
        
        var isFlagsProperty = enumType.GetType().GetProperty("IsFlags");
        return isFlagsProperty != null && (bool)isFlagsProperty.GetValue(enumType, null);
    }

    public bool IsEnumType(GlobalItem edmType)
    {
        ArgumentNotNull(edmType, "edmType");

        return edmType.GetType().Name == "EnumType";
    }

    public PrimitiveType GetEnumUnderlyingType(EdmType enumType)
    {
        ArgumentNotNull(enumType, "enumType");

        return (PrimitiveType)enumType.GetType().GetProperty("UnderlyingType").GetValue(enumType, null);
    }

    public string CreateLiteral(object value)
    {
        if (value == null || value.GetType() != typeof(TimeSpan))
        {
            return _code.CreateLiteral(value);
        }

        return string.Format(CultureInfo.InvariantCulture, "new TimeSpan({0})", ((TimeSpan)value).Ticks);
    }
    
    public bool VerifyCaseInsensitiveTypeUniqueness(IEnumerable<string> types, string sourceFile)
    {
        ArgumentNotNull(types, "types");
        ArgumentNotNull(sourceFile, "sourceFile");
        
        var hash = new HashSet<string>(StringComparer.InvariantCultureIgnoreCase);
        if (types.Any(item => !hash.Add(item)))
        {
            _errors.Add(
                new CompilerError(sourceFile, -1, -1, "6023",
                    String.Format(CultureInfo.CurrentCulture, CodeGenerationTools.GetResourceString("Template_CaseInsensitiveTypeConflict"))));
            return false;
        }
        return true;
    }
    
    public IEnumerable<SimpleType> GetEnumItemsToGenerate(IEnumerable<GlobalItem> itemCollection)
    {
        return GetItemsToGenerate<SimpleType>(itemCollection)
            .Where(e => IsEnumType(e));
    }
    
    public IEnumerable<T> GetItemsToGenerate<T>(IEnumerable<GlobalItem> itemCollection) where T: EdmType
    {
        return itemCollection
            .OfType<T>()
            .Where(i => !i.MetadataProperties.Any(p => p.Name == ExternalTypeNameAttributeName))
            .OrderBy(i => i.Name);
    }

    public IEnumerable<string> GetAllGlobalItems(IEnumerable<GlobalItem> itemCollection)
    {
        return itemCollection
            .Where(i => i is EntityType || i is ComplexType || i is EntityContainer || IsEnumType(i))
            .Select(g => GetGlobalItemName(g));
    }

    public string GetGlobalItemName(GlobalItem item)
    {
        if (item is EdmType)
        {
            return ((EdmType)item).Name;
        }
        else
        {
            return ((EntityContainer)item).Name;
        }
    }

    public IEnumerable<EdmProperty> GetSimpleProperties(EntityType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type);
    }
    
    public IEnumerable<EdmProperty> GetSimpleProperties(ComplexType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type);
    }
    
    public IEnumerable<EdmProperty> GetComplexProperties(EntityType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == type);
    }
    
    public IEnumerable<EdmProperty> GetComplexProperties(ComplexType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == type);
    }

    public IEnumerable<EdmProperty> GetPropertiesWithDefaultValues(EntityType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type && p.DefaultValue != null);
    }
    
    public IEnumerable<EdmProperty> GetPropertiesWithDefaultValues(ComplexType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type && p.DefaultValue != null);
    }

    public IEnumerable<NavigationProperty> GetNavigationProperties(EntityType type)
    {
        return type.NavigationProperties.Where(np => np.DeclaringType == type);
    }
    
    public IEnumerable<NavigationProperty> GetCollectionNavigationProperties(EntityType type)
    {
        return type.NavigationProperties.Where(np => np.DeclaringType == type && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);
    }
    
    public FunctionParameter GetReturnParameter(EdmFunction edmFunction)
    {
        ArgumentNotNull(edmFunction, "edmFunction");

        var returnParamsProperty = edmFunction.GetType().GetProperty("ReturnParameters");
        return returnParamsProperty == null
            ? edmFunction.ReturnParameter
            : ((IEnumerable<FunctionParameter>)returnParamsProperty.GetValue(edmFunction, null)).FirstOrDefault();
    }

    public bool IsComposable(EdmFunction edmFunction)
    {
        ArgumentNotNull(edmFunction, "edmFunction");

        var isComposableProperty = edmFunction.GetType().GetProperty("IsComposableAttribute");
        return isComposableProperty != null && (bool)isComposableProperty.GetValue(edmFunction, null);
    }

    public IEnumerable<FunctionImportParameter> GetParameters(EdmFunction edmFunction)
    {
        return FunctionImportParameter.Create(edmFunction.Parameters, _code, _ef);
    }

    public TypeUsage GetReturnType(EdmFunction edmFunction)
    {
        var returnParam = GetReturnParameter(edmFunction);
        return returnParam == null ? null : _ef.GetElementType(returnParam.TypeUsage);
    }
    
    public bool GenerateMergeOptionFunction(EdmFunction edmFunction, bool includeMergeOption)
    {
        var returnType = GetReturnType(edmFunction);
        return !includeMergeOption && returnType != null && returnType.EdmType.BuiltInTypeKind == BuiltInTypeKind.EntityType;
    }
}

public static void ArgumentNotNull<T>(T arg, string name) where T : class
{
    if (arg == null)
    {
        throw new ArgumentNullException(name);
    }
}
#>